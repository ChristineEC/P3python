import random
import gspread
from google.oauth2.service_account import Credentials

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
    ]

CREDS = Credentials.from_service_account_file('creds.json')
SCOPED_CREDS = CREDS.with_scopes(SCOPE)
GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)
SHEET = GSPREAD_CLIENT.open('words')

words = SHEET.worksheet('unfiltered')

data = words.get_all_values()
def flatten_sum(data):
    """
    Changes the list of lists (each containing
    a single word) obtained from google sheet
    into a single list of words
    """
    return sum(data, [])

single_list = flatten_sum(data)
already_guessed = set()

def display_game_title():
    print("HANGMAN")

def display_game_rules():
    print("Here are the rules \n")

def ask_for_player_name():
    while True:
        name = input("Please enter your name: \n")
        if validate_user_name_as_alpha(name):
            print(f"Hello, {name}! Welcome to Hangman! \n")
            break
    return name

def validate_user_name_as_alpha(nentry):
    """
    Checks whether user has input a name using only
    letters A-Z. Prompts new entry otherwise.
    """
    print('Validating user name as alpha')
    try:
        if not nentry.isalpha():
            raise TypeError(
                f"Name must consist of letters A-Z only."
            )
    except TypeError as e:
        print(f'Invalid entry: {e} Please try again.')
        return False
    return True

def get_word():
    """
    Get a random word from the list of words
    and make it uppercase
    """
    word = random.choice(single_list)
    print(f'Word "{word}" successfully generated by program')
    word = word.upper()
    print(f'word variable now changed to uppercase: {word}')

    return word

def display_underscores(string):
    """
    Gets the number of letters in the randomly chosen word
    and prints out an equal number of underscores. Tells
    player the length of the word.
    """
    word_length = len(string)
    print(f'The word length is {word_length} letters.')
    for letter in string:
        print("_", end= " ")
    print("\n")

def ask_for_guess():
    """
    Asks player to guess a letter, 
    calls function to validate input as a letter, 
    changes input to capital if a lette, else asks player
    again for letter input. Then calls function  to validate
    that guess has not been repeated,
    and continues to ask for a (new) letter input until 
    a valid letter is received. Appends the letter 
    to a set of guessed letters and returns that set.
    """
    global already_guessed
    while True:
        guess = input("Enter a letter: \n")
        if validate_guess_as_letter(guess):
            guess = guess.upper()
            print(f'You guessed {guess} Ready to check if already guessed.')
        if guess.isalpha() and check_already_guessed(guess):
            print(f'You guessed {guess}. Now adding to set of guesses.')
            already_guessed.add(guess)
            print(f'New set from the while loop {already_guessed}')
            break
    return already_guessed

def validate_guess_as_letter(typed):
    """
    Checks whether user has input a letter. If not,
    raises an error telling the user their input
    is invalid and asking for a letter input.
    """
    print('Validating that the guess is a letter')
    try:
        if not typed.isalpha():
            raise TypeError(
                f'Guess should be a letter. You typed {typed}.'
            )
    except TypeError as e:
        print(f'Invalid guess: {e} Please try again.')
        return False
    return True

def check_already_guessed(ltr):
    global already_guessed
    print("Checking to see if already guessed")
    try:
        if ltr in already_guessed:
            raise ValueError('You already guessed {ltr}.')
    except ValueError as e:
        print(f'{e} Try again.')
        return False
    return True

def check_already_guessed(ltr):
    try:
        if ltr in already_guessed:
            raise ValueError(
                f'You already guessed {ltr}. Try again.'
            )
    except ValueError as e:
        print({e})
        return False
    return True


def main():
    """
    Runs main program
    """
    display_game_title()
    display_game_rules()
    ask_for_player_name()
    word = get_word()
    display_underscores(word)
    guess = ask_for_guess()
    guesses = already_guessed
    print(guesses)
    word_letters = set(word)
    print(word_letters)
    guess = ask_for_guess()
    guesses = already_guessed
    print(guesses)
    word_letters = set(word)
    print(word_letters)
    guess = ask_for_guess()
    guesses = already_guessed
    print(guesses)
    word_letters = set(word)
    print(word_letters)

main()